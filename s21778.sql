BEGIN
  FOR c IN ( SELECT table_name FROM user_tables WHERE table_name not LIKE 'A1_%' )
  LOOP
    EXECUTE IMMEDIATE 'DROP TABLE ' || c.table_name || ' CASCADE CONSTRAINTS' ;
  END LOOP;
END;
/

-- tables
-- Table: Doctor
CREATE TABLE Doctor (
    IdDoctor integer  NOT NULL,
    FirstName varchar2(50)  ,
    LastName varchar2(50)  ,
    DoctorSpeciality varchar2(50)  ,
	Salary float(10),
    CONSTRAINT Doctor_pk PRIMARY KEY (IdDoctor)
) ;

-- Table: DoctorPatient
CREATE TABLE DoctorPatient (
    IdDocPat integer  NOT NULL,
    IdPatient integer  NOT NULL,
    IdDoctor integer  NOT NULL,
    CONSTRAINT DoctorPatient_pk PRIMARY KEY (IdDocPat)
) ;

-- Table: Nurse
CREATE TABLE Nurse (
    IdNurse integer  NOT NULL,
    IdSupervisor integer  NOT NULL,
    FirstName varchar2(50)  NOT NULL,
    IdWard integer  NOT NULL,
    CONSTRAINT Nurse_pk PRIMARY KEY (IdNurse)
) ;

-- Table: Patient
CREATE TABLE Patient (
    IdPatient integer  NOT NULL,
    FirstName varchar2(20)  NOT NULL,
    LastName varchar2(50)  NOT NULL,
    IdRoom integer  ,
    CONSTRAINT Patient_pk PRIMARY KEY (IdPatient)
) ;

-- Table: Room
CREATE TABLE Room (
    IdRoom integer  NOT NULL,
    RoomNumber varchar2(50)  NOT NULL,
    IdWard integer  NOT NULL,
    CONSTRAINT Room_pk PRIMARY KEY (IdRoom)
) ;

-- Table: TreatmentDetails
CREATE TABLE TreatmentDetails (
    IdTreatmentDetails integer  NOT NULL,
    TreatmentName varchar2(50)  ,
    Price float(10)  NOT NULL,
    IdPatient integer  ,
    CONSTRAINT TreatmentDetails_pk PRIMARY KEY (IdTreatmentDetails)
) ;

-- Table: Ward
CREATE TABLE Ward (
    IdWard integer  NOT NULL,
    WardName varchar2(50)  NOT NULL,
    CONSTRAINT Ward_pk PRIMARY KEY (IdWard)
) ;

-- foreign keys
-- Reference: DoctorPatient_Doctor (table: DoctorPatient)
ALTER TABLE DoctorPatient ADD CONSTRAINT DoctorPatient_Doctor
    FOREIGN KEY (IdDoctor)
    REFERENCES Doctor (IdDoctor);

-- Reference: DoctorPatient_Patient (table: DoctorPatient)
ALTER TABLE DoctorPatient ADD CONSTRAINT DoctorPatient_Patient
    FOREIGN KEY (IdPatient)
    REFERENCES Patient (IdPatient);

-- Reference: Nurse_Ward (table: Nurse)
ALTER TABLE Nurse ADD CONSTRAINT Nurse_Ward
    FOREIGN KEY (IdWard)
    REFERENCES Ward (IdWard);

-- Reference: Patient_Room (table: Patient)
ALTER TABLE Patient ADD CONSTRAINT Patient_Room
    FOREIGN KEY (IdRoom)
    REFERENCES Room (IdRoom);

-- Reference: Room_Ward (table: Room)
ALTER TABLE Room ADD CONSTRAINT Room_Ward
    FOREIGN KEY (IdWard)
    REFERENCES Ward (IdWard);

-- Reference: TreatmentDetails_Patient (table: TreatmentDetails)
ALTER TABLE TreatmentDetails ADD CONSTRAINT TreatmentDetails_Patient
    FOREIGN KEY (IdPatient)
    REFERENCES Patient (IdPatient);


--data

--ADDING DATA TO DOCTOR TABLE
INSERT INTO DOCTOR(IDDOCTOR, FIRSTNAME, LASTNAME, DOCTORSPECIALITY, SALARY) VALUES (1, ' Charles ', 'Burton', 'Allergy',4000);
INSERT INTO DOCTOR(IDDOCTOR, FIRSTNAME, LASTNAME, DOCTORSPECIALITY, SALARY) VALUES (2, 'Malcolm', 'Sayer', 'Pediatricians',5000);
INSERT INTO DOCTOR(IDDOCTOR, FIRSTNAME, LASTNAME, DOCTORSPECIALITY, SALARY) VALUES (3, 'Miguel', 'Reinhardt', 'Cardiologist',9000);
INSERT INTO DOCTOR(IDDOCTOR, FIRSTNAME, LASTNAME, DOCTORSPECIALITY, SALARY) VALUES (4, 'Kate ', 'McRae', 'Neurologists',6000);
INSERT INTO DOCTOR(IDDOCTOR, FIRSTNAME, LASTNAME, DOCTORSPECIALITY, SALARY) VALUES (5, ' Lawrence', 'Augustine', 'Dermatologists',4500);
INSERT INTO DOCTOR(IDDOCTOR, FIRSTNAME, LASTNAME, DOCTORSPECIALITY, SALARY) VALUES (6, 'Rex', 'Martin', 'Allergy',4000);
INSERT INTO DOCTOR(IDDOCTOR, FIRSTNAME, LASTNAME, DOCTORSPECIALITY, SALARY) VALUES (8, 'Andrew', 'Manson', 'Allergy',3500);
INSERT INTO DOCTOR(IDDOCTOR, FIRSTNAME, LASTNAME, DOCTORSPECIALITY, SALARY) VALUES (9, 'Hastie', 'Lanyon', 'Neurologists',6000);
INSERT INTO DOCTOR(IDDOCTOR, FIRSTNAME, LASTNAME, DOCTORSPECIALITY, SALARY) VALUES (10, 'Bernard', 'Rieux', 'Pediatricians',5000);

--ADDING DATA TO WARD TABLE
INSERT INTO WARD(IDWARD, WARDNAME) VALUES (111, 'ICU');
INSERT INTO WARD(IDWARD, WARDNAME) VALUES (112, 'COMA');
INSERT INTO WARD (IDWARD, WARDNAME) VALUES (113, 'GENERAL');
INSERT INTO WARD (IDWARD, WARDNAME) VALUES (114, 'CHILD WARD');
INSERT INTO WARD(IDWARD, WARDNAME) VALUES (115, 'WAITING');

--ADDING DATA TO PATIENT TABLE
INSERT INTO PATIENT(IDPATIENT, FIRSTNAME, LASTNAME) VALUES (101, 'Jorge', 'Santiago' );
INSERT INTO PATIENT(IDPATIENT, FIRSTNAME, LASTNAME) VALUES (102, 'Jamari', 'Villanueva');
INSERT INTO PATIENT(IDPATIENT, FIRSTNAME, LASTNAME) VALUES (103, 'Case ', 'Chapman');
INSERT INTO PATIENT(IDPATIENT, FIRSTNAME, LASTNAME) VALUES (104, 'William', 'Farrell');
INSERT INTO PATIENT(IDPATIENT, FIRSTNAME, LASTNAME) VALUES (105, 'Adalynn', 'Mora');
INSERT INTO PATIENT(IDPATIENT, FIRSTNAME, LASTNAME) VALUES (106, 'Casey', 'Rhodes');
INSERT INTO PATIENT(IDPATIENT, FIRSTNAME, LASTNAME) VALUES (107, 'Lilly', 'Mahoney');
INSERT INTO PATIENT(IDPATIENT, FIRSTNAME, LASTNAME) VALUES (108, 'Derick', 'Guerrero');
INSERT INTO PATIENT(IDPATIENT, FIRSTNAME, LASTNAME) VALUES (109, 'Makhi', 'Brock');
INSERT INTO PATIENT(IDPATIENT, FIRSTNAME, LASTNAME) VALUES (110, 'Christine', 'Newton');
INSERT INTO PATIENT(IDPATIENT, FIRSTNAME, LASTNAME) VALUES (111, 'Alexander', 'Cheyanne');
INSERT INTO PATIENT(IDPATIENT, FIRSTNAME, LASTNAME) VALUES (113, 'Terry', 'Watkins');
INSERT INTO PATIENT(IDPATIENT, FIRSTNAME, LASTNAME) VALUES (114, 'Ter', 'Wat');

--ADDING DATA TO NURSE TABLE
INSERT INTO NURSE(IDNURSE, IDSUPERVISOR, FIRSTNAME, IDWARD) VALUES (121, 21, 'Whitney',111);
INSERT INTO NURSE(IDNURSE, IDSUPERVISOR, FIRSTNAME, IDWARD) VALUES (122, 22, 'Peyton', 112);
INSERT INTO NURSE(IDNURSE, IDSUPERVISOR, FIRSTNAME, IDWARD) VALUES (123, 23, 'Tia', 111);
INSERT INTO NURSE(IDNURSE, IDSUPERVISOR, FIRSTNAME, IDWARD) VALUES (124, 24, 'Mia', 112);
INSERT INTO NURSE(IDNURSE, IDSUPERVISOR, FIRSTNAME, IDWARD) VALUES (125, 25, 'Elisabeth', 113);
INSERT INTO NURSE(IDNURSE, IDSUPERVISOR, FIRSTNAME, IDWARD) VALUES (126, 26, 'Karlee', 114);
INSERT INTO NURSE(IDNURSE, IDSUPERVISOR, FIRSTNAME, IDWARD) VALUES (127, 27, 'Marina', 113);
INSERT INTO NURSE(IDNURSE, IDSUPERVISOR, FIRSTNAME, IDWARD) VALUES (128, 28, 'Tatiana', 114);

--ADDING DATA TO ROOM TABLE
INSERT INTO ROOM(IDROOM, ROOMNUMBER ,IDWARD) VALUES (1001, 'A' , 111);
INSERT INTO ROOM(IDROOM, ROOMNUMBER ,IDWARD) VALUES (1002, 'B', 111);
INSERT INTO ROOM(IDROOM, ROOMNUMBER ,IDWARD) VALUES (1003, 'C', 112);
INSERT INTO ROOM(IDROOM, ROOMNUMBER ,IDWARD) VALUES (1004, 'D', 112);
INSERT INTO ROOM(IDROOM, ROOMNUMBER ,IDWARD) VALUES (1005, 'E', 113);
INSERT INTO ROOM(IDROOM, ROOMNUMBER ,IDWARD) VALUES (1006, 'F', 113);
INSERT INTO ROOM(IDROOM, ROOMNUMBER ,IDWARD) VALUES (1007, 'G', 113);
INSERT INTO ROOM(IDROOM, ROOMNUMBER ,IDWARD) VALUES (1008, 'H', 114);
INSERT INTO ROOM(IDROOM, ROOMNUMBER ,IDWARD) VALUES (1009, 'I', 114);
INSERT INTO ROOM(IDROOM, ROOMNUMBER ,IDWARD) VALUES (1010, 'J', 114);
INSERT INTO ROOM(IDROOM, ROOMNUMBER ,IDWARD) VALUES (1011, 'K', 115);
INSERT INTO ROOM(IDROOM, ROOMNUMBER ,IDWARD) VALUES (1012, 'L', 115);

--ADDING DATA TO TREATMENTDETAILS TABLE
INSERT INTO TREATMENTDETAILS (IDTREATMENTDETAILS, TREATMENTNAME, PRICE, IDPATIENT) VALUES (1, 'ALLERGY TREATMENT', 250,101);
INSERT INTO TREATMENTDETAILS  (IDTREATMENTDETAILS, TREATMENTNAME, PRICE, IDPATIENT) VALUES (2, 'HEART SURGERY', 5000,102);
INSERT INTO TREATMENTDETAILS  (IDTREATMENTDETAILS, TREATMENTNAME, PRICE, IDPATIENT) VALUES (3, 'LABOUR', 7000,106);
INSERT INTO TREATMENTDETAILS (IDTREATMENTDETAILS, TREATMENTNAME, PRICE, IDPATIENT) VALUES (4, 'NEURON DISORDER TREATMENT', 500,103);
INSERT INTO TREATMENTDETAILS  (IDTREATMENTDETAILS, TREATMENTNAME, PRICE, IDPATIENT) VALUES (5, 'SKIN TREATMENT', 400,104);
INSERT INTO TREATMENTDETAILS (IDTREATMENTDETAILS, TREATMENTNAME, PRICE, IDPATIENT) VALUES (6, 'HEART SURGERY', 5000,105);
INSERT INTO TREATMENTDETAILS (IDTREATMENTDETAILS, TREATMENTNAME, PRICE, IDPATIENT) VALUES (7, 'ALLERGY TREATMENT', 250,107);
INSERT INTO TREATMENTDETAILS (IDTREATMENTDETAILS, TREATMENTNAME, PRICE, IDPATIENT) VALUES (8, 'NEURON DISORDER TREATMENT', 600,108);
INSERT INTO TREATMENTDETAILS(IDTREATMENTDETAILS, TREATMENTNAME, PRICE, IDPATIENT) VALUES (9, 'LABOUR', 7000, 110);
INSERT INTO TREATMENTDETAILS(IDTREATMENTDETAILS, TREATMENTNAME, PRICE, IDPATIENT) VALUES (10, 'SKIN TREATMENT', 400,109);
INSERT INTO TREATMENTDETAILS (IDTREATMENTDETAILS, TREATMENTNAME, PRICE, IDPATIENT) VALUES (11, 'SKIN TREATMENT', 400,111);
INSERT INTO TREATMENTDETAILS (IDTREATMENTDETAILS, TREATMENTNAME, PRICE, IDPATIENT) VALUES (12, 'ALLERGY TREATMENT', 250,113);

--ADDING DATA TO DOCTORPATIENT
INSERT INTO DOCTORPATIENT(IDDOCPAT, IDPATIENT, IDDOCTOR) VALUES (1111, 101, 1);
INSERT INTO DOCTORPATIENT(IDDOCPAT, IDPATIENT, IDDOCTOR) VALUES (1112, 106, 2);
INSERT INTO DOCTORPATIENT(IDDOCPAT, IDPATIENT, IDDOCTOR) VALUES (1113, 102, 3);
INSERT INTO DOCTORPATIENT(IDDOCPAT, IDPATIENT, IDDOCTOR) VALUES (1114, 103, 4);
INSERT INTO DOCTORPATIENT(IDDOCPAT, IDPATIENT, IDDOCTOR) VALUES (1115, 104, 5);
INSERT INTO DOCTORPATIENT(IDDOCPAT, IDPATIENT, IDDOCTOR) VALUES (1116, 113, 6);
INSERT INTO DOCTORPATIENT(IDDOCPAT, IDPATIENT, IDDOCTOR) VALUES (1117, 107, 8);
INSERT INTO DOCTORPATIENT(IDDOCPAT, IDPATIENT, IDDOCTOR) VALUES (1118, 108, 9);
INSERT INTO DOCTORPATIENT(IDDOCPAT, IDPATIENT, IDDOCTOR) VALUES (1119, 110, 10);
INSERT INTO DOCTORPATIENT(IDDOCPAT, IDPATIENT, IDDOCTOR) VALUES (1110, 109, 5);
INSERT INTO DOCTORPATIENT(IDDOCPAT, IDPATIENT, IDDOCTOR) VALUES (11111, 111, 5);
INSERT INTO DOCTORPATIENT(IDDOCPAT, IDPATIENT, IDDOCTOR) VALUES (11112, 105, 3);








-- ==================================================================================================================
--TASK== TRIGGER BEFORE INSERT AND DELETE (FOR EACH ROW)
-- ==================================================================================================================

SET SERVEROUTPUT ON;
CREATE OR REPLACE TRIGGER TRIGGER_2
BEFORE INSERT OR DELETE ON TREATMENTDETAILS 
FOR EACH ROW
BEGIN 
    IF DELETING AND :old.price >= 5000 THEN     
        Raise_application_error(-20100,'YOU CANNOT DELETE EXPENSIVE TREATMENTS!'); 
    ELSIF INSERTING AND :NEW.PRICE < 1000 THEN  
        Raise_application_error(-20100,'YOU CANNOT INSERT A NEW TREATMENT WITH A PRICE BELOW 1000!');          
    END IF;
END;
/

SELECT * FROM PATIENT;
SELECT * FROM TREATMENTDETAILS;

-- TO TEST THE TRIGGER 


DELETE FROM TREATMENTDETAILS WHERE IDTREATMENTDETAILS =3;
INSERT INTO TREATMENTDETAILS VALUES(13, 'LIVER SURGERY', 900, 105);

CREATE OR REPLACE TRIGGER TRIGGER_3
    BEFORE DELETE OR INSERT
        on TREATMENTDETAILS
    FOR EACH ROW
    DECLARE
cursor a1 is
        SELECT * FROM TREATMENTDETAILS;
    BEGIN
    FOR TREATMENTDETAILS in a1 LOOP
    IF DELETING AND :OLD.price >=5000 THEN     
        Raise_application_error(-20100,'YOU CANNOT DELETE EXPENSIVE TREATMENTS!'); 
    ELSIF INSERTING AND :NEW.PRICE < 1000 THEN  
        Raise_application_error(-20100,'YOU CANNOT INSERT A NEW TREATMENT WITH A PRICE BELOW 1000!');          
    END IF;
        
        end loop;
    end;
/
-- TO TEST THE TRIGGER 
DELETE FROM TREATMENTDETAILS WHERE PRICE =7000;
INSERT INTO TREATMENTDETAILS VALUES(13, 'LIVER SURGERY', 900, 105);
-- ============================================================================================================================
--TASK== CURSOR.
-- ============================================================================================================================

DECLARE 
v_IDPATIENT INTEGER; 
v_PRICE   INTEGER;
v_TREATMENTNAME  VARCHAR2(30);
COUNTER INTEGER;
CURSOR cur IS SELECT TREATMENTNAME, PRICE, IDPATIENT FROM TREATMENTDETAILS;

BEGIN
OPEN cur;    
    LOOP
        FETCH cur INTO v_TREATMENTNAME , v_PRICE,v_IDPATIENT;
        EXIT WHEN cur%NOTFOUND;
            dbms_output.put_line( v_TREATMENTNAME ||''||v_PRICE);
            SELECT COUNT(IDTREATMENTDETAILS) INTO COUNTER FROM TREATMENTDETAILS WHERE PRICE=7000;
           IF COUNTER = 1 THEN            
                    DBMS_OUTPUT.PUT_LINE('PATIENT WILL GET DISCOUNT OF 10%');              
           ELSIF COUNTER > 1 THEN                    
                 dbms_output.put_line('PATIENT WILL GET DISCOUNT OF 5%');
        END IF;
    END LOOP;
    CLOSE cur;

END;
/
SELECT COUNT(IDTREATMENTDETAILS)  FROM TREATMENTDETAILS WHERE PRICE >= 5000;
--================================================================================================================================
--TASK== PROCEDURE.
--================================================================================================================================


CREATE OR REPLACE PROCEDURE ADD_DOCTOR(FIRST_N IN DOCTOR.FIRSTNAME%TYPE
                                         , LAST_N IN DOCTOR.LASTNAME%TYPE
                                         , OCCUP IN DOCTOR.DOCTORSPECIALITY%TYPE
                                        , SAL IN DOCTOR.SALARY%TYPE)
AS
ID_N NUMBER(4);
COUNTER NUMBER(4);
THIS_PERSON_EXISTS EXCEPTION;
SAL_TOO_BIG EXCEPTION;
BEGIN
SELECT COUNT(IDDOCTOR) INTO COUNTER FROM DOCTOR WHERE FIRST_N = FIRSTNAME AND LAST_N = LASTNAME;
IF COUNTER>0 THEN RAISE THIS_PERSON_EXISTS;
ELSE
IF SAL>10000 THEN RAISE SAL_TOO_BIG;
ELSE
SELECT NVL(MAX(IDDOCTOR)+1, 1) INTO ID_N FROM DOCTOR;
INSERT INTO DOCTOR VALUES(ID_N, FIRST_N, LAST_N, OCCUP, SAL);
DBMS_OUTPUT.PUT_LINE('NEW DOCTOR ' || FIRST_N || ' ' ||  LAST_N ||' HAS BEEN INSERTED IN YOUR DATABASE');
END IF;
END IF;
EXCEPTION 
WHEN THIS_PERSON_EXISTS THEN
DBMS_OUTPUT.PUT_LINE('PERSON CALLED ' || FIRST_N || ' ' ||  LAST_N ||' ALREADY EXISTS IN YOUR DATABASE!!');
WHEN SAL_TOO_BIG THEN
DBMS_OUTPUT.PUT_LINE('YOU CAN NOT PAY HIM MORE THAN 10 000 !!!');
END;
/

EXECUTE ADD_DOCTOR('Macej', 'Prazki', 'assistant', 3455);
EXECUTE ADD_DOCTOR('Macej', 'Prazki', 'assistant', 34525);
EXECUTE ADD_DOCTOR('RAJU', 'JHA', 'assistant', 20000);

SELECT
    *
FROM DOCTOR;

DELETE FROM DOCTOR WHERE DOCTORSPECIALITY  = 'assistant';
